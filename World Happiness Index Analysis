{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# World Happiness Index Analysis\n",
    "\n",
    "TODO - I have selected a data set containing factors effecting happiness index. Happiness index is calculated evvey year to know how the factors effect peoples happiness and try to improve the happiness score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install jovian opendatasets --upgrade --quiet"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's begin by downloading the data, and listing the files within the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "data_2019 = pd.read_csv('./happiness_index/2019.csv')\n",
    "data_2018 = pd.read_csv('./happiness_index/2018.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change this\n",
    "data_dir = './happiness_index'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2018.csv', '2019.csv']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.listdir(data_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us save and upload our work to Jovian before continuing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "project_name = \"world-happyness-index-analysis\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install jovian --upgrade -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import jovian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[jovian] Attempting to save notebook..\u001b[0m\n",
      "[jovian] Updating notebook \"mgauthamvarma/world-happyness-index-analysis\" on https://jovian.ml/\u001b[0m\n",
      "[jovian] Uploading notebook..\u001b[0m\n",
      "[jovian] Capturing environment..\u001b[0m\n",
      "[jovian] Committed successfully! https://jovian.ml/mgauthamvarma/world-happyness-index-analysis\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'https://jovian.ml/mgauthamvarma/world-happyness-index-analysis'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jovian.commit(project=project_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2019_df = data_2019.copy()\n",
    "data_2018_df = data_2018.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 156 entries, 0 to 155\n",
      "Data columns (total 9 columns):\n",
      " #   Column                        Non-Null Count  Dtype  \n",
      "---  ------                        --------------  -----  \n",
      " 0   Overall rank                  156 non-null    int64  \n",
      " 1   Country or region             156 non-null    object \n",
      " 2   Score                         156 non-null    float64\n",
      " 3   GDP per capita                156 non-null    float64\n",
      " 4   Social support                156 non-null    float64\n",
      " 5   Healthy life expectancy       156 non-null    float64\n",
      " 6   Freedom to make life choices  156 non-null    float64\n",
      " 7   Generosity                    156 non-null    float64\n",
      " 8   Perceptions of corruption     155 non-null    float64\n",
      "dtypes: float64(7), int64(1), object(1)\n",
      "memory usage: 11.1+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 156 entries, 0 to 155\n",
      "Data columns (total 9 columns):\n",
      " #   Column                        Non-Null Count  Dtype  \n",
      "---  ------                        --------------  -----  \n",
      " 0   Overall rank                  156 non-null    int64  \n",
      " 1   Country or region             156 non-null    object \n",
      " 2   Score                         156 non-null    float64\n",
      " 3   GDP per capita                156 non-null    float64\n",
      " 4   Social support                156 non-null    float64\n",
      " 5   Healthy life expectancy       156 non-null    float64\n",
      " 6   Freedom to make life choices  156 non-null    float64\n",
      " 7   Generosity                    156 non-null    float64\n",
      " 8   Perceptions of corruption     156 non-null    float64\n",
      "dtypes: float64(7), int64(1), object(1)\n",
      "memory usage: 11.1+ KB\n"
     ]
    }
   ],
   "source": [
    "data_2018_df.info()\n",
    "data_2019_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Overall rank', 'Country or region', 'Score', 'GDP per capita',\n",
       "       'Social support', 'Healthy life expectancy',\n",
       "       'Freedom to make life choices', 'Generosity',\n",
       "       'Perceptions of corruption'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2018_df.columns "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we can see that the column names have spaces and capital letters in the beginning of the names. So, lets clean the names by replacing white spaces with underscores and convert capital letters to lower case letters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2018_df.columns = data_2018_df.columns.str.strip().str.replace(' ','_').str.lower()\n",
    "data_2019_df.columns = data_2019_df.columns.str.strip().str.replace(' ','_').str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['overall_rank', 'country_or_region', 'score', 'gdp_per_capita',\n",
       "       'social_support', 'healthy_life_expectancy',\n",
       "       'freedom_to_make_life_choices', 'generosity',\n",
       "       'perceptions_of_corruption'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2018_df.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['overall_rank', 'country_or_region', 'score', 'gdp_per_capita',\n",
       "       'social_support', 'healthy_life_expectancy',\n",
       "       'freedom_to_make_life_choices', 'generosity',\n",
       "       'perceptions_of_corruption'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2019_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 156 entries, 0 to 155\n",
      "Data columns (total 9 columns):\n",
      " #   Column                        Non-Null Count  Dtype  \n",
      "---  ------                        --------------  -----  \n",
      " 0   overall_rank                  156 non-null    int64  \n",
      " 1   country_or_region             156 non-null    object \n",
      " 2   score                         156 non-null    float64\n",
      " 3   gdp_per_capita                156 non-null    float64\n",
      " 4   social_support                156 non-null    float64\n",
      " 5   healthy_life_expectancy       156 non-null    float64\n",
      " 6   freedom_to_make_life_choices  156 non-null    float64\n",
      " 7   generosity                    156 non-null    float64\n",
      " 8   perceptions_of_corruption     155 non-null    float64\n",
      "dtypes: float64(7), int64(1), object(1)\n",
      "memory usage: 11.1+ KB\n"
     ]
    }
   ],
   "source": [
    "data_2018_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Finland', 'Norway', 'Denmark', 'Iceland', 'Switzerland',\n",
       "       'Netherlands', 'Canada', 'New Zealand', 'Sweden', 'Australia',\n",
       "       'United Kingdom', 'Austria', 'Costa Rica', 'Ireland', 'Germany',\n",
       "       'Belgium', 'Luxembourg', 'United States', 'Israel',\n",
       "       'United Arab Emirates', 'Czech Republic', 'Malta', 'France',\n",
       "       'Mexico', 'Chile', 'Taiwan', 'Panama', 'Brazil', 'Argentina',\n",
       "       'Guatemala', 'Uruguay', 'Qatar', 'Saudi Arabia', 'Singapore',\n",
       "       'Malaysia', 'Spain', 'Colombia', 'Trinidad & Tobago', 'Slovakia',\n",
       "       'El Salvador', 'Nicaragua', 'Poland', 'Bahrain', 'Uzbekistan',\n",
       "       'Kuwait', 'Thailand', 'Italy', 'Ecuador', 'Belize', 'Lithuania',\n",
       "       'Slovenia', 'Romania', 'Latvia', 'Japan', 'Mauritius', 'Jamaica',\n",
       "       'South Korea', 'Northern Cyprus', 'Russia', 'Kazakhstan', 'Cyprus',\n",
       "       'Bolivia', 'Estonia', 'Paraguay', 'Peru', 'Kosovo', 'Moldova',\n",
       "       'Turkmenistan', 'Hungary', 'Libya', 'Philippines', 'Honduras',\n",
       "       'Belarus', 'Turkey', 'Pakistan', 'Hong Kong', 'Portugal', 'Serbia',\n",
       "       'Greece', 'Lebanon', 'Montenegro', 'Croatia', 'Dominican Republic',\n",
       "       'Algeria', 'Morocco', 'China', 'Azerbaijan', 'Tajikistan',\n",
       "       'Macedonia', 'Jordan', 'Nigeria', 'Kyrgyzstan',\n",
       "       'Bosnia and Herzegovina', 'Mongolia', 'Vietnam', 'Indonesia',\n",
       "       'Bhutan', 'Somalia', 'Cameroon', 'Bulgaria', 'Nepal', 'Venezuela',\n",
       "       'Gabon', 'Palestinian Territories', 'South Africa', 'Iran',\n",
       "       'Ivory Coast', 'Ghana', 'Senegal', 'Laos', 'Tunisia', 'Albania',\n",
       "       'Sierra Leone', 'Congo (Brazzaville)', 'Bangladesh', 'Sri Lanka',\n",
       "       'Iraq', 'Mali', 'Namibia', 'Cambodia', 'Burkina Faso', 'Egypt',\n",
       "       'Mozambique', 'Kenya', 'Zambia', 'Mauritania', 'Ethiopia',\n",
       "       'Georgia', 'Armenia', 'Myanmar', 'Chad', 'Congo (Kinshasa)',\n",
       "       'India', 'Niger', 'Uganda', 'Benin', 'Sudan', 'Ukraine', 'Togo',\n",
       "       'Guinea', 'Lesotho', 'Angola', 'Madagascar', 'Zimbabwe',\n",
       "       'Afghanistan', 'Botswana', 'Malawi', 'Haiti', 'Liberia', 'Syria',\n",
       "       'Rwanda', 'Yemen', 'Tanzania', 'South Sudan',\n",
       "       'Central African Republic', 'Burundi'], dtype=object)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2018_df.country_or_region.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The country or region column have the data stored as object. Lets convert it to string now. The .astype('|S') function can be used to do this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_2018_df['country_or_region'] = data_2018_df['country_or_region'].astype('|S')\n",
    "data_2019_df['country_or_region'] = data_2019_df['country_or_region'].astype('|S')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 156 entries, 0 to 155\n",
      "Data columns (total 9 columns):\n",
      " #   Column                        Non-Null Count  Dtype  \n",
      "---  ------                        --------------  -----  \n",
      " 0   overall_rank                  156 non-null    int64  \n",
      " 1   country_or_region             156 non-null    |S24   \n",
      " 2   score                         156 non-null    float64\n",
      " 3   gdp_per_capita                156 non-null    float64\n",
      " 4   social_support                156 non-null    float64\n",
      " 5   healthy_life_expectancy       156 non-null    float64\n",
      " 6   freedom_to_make_life_choices  156 non-null    float64\n",
      " 7   generosity                    156 non-null    float64\n",
      " 8   perceptions_of_corruption     155 non-null    float64\n",
      "dtypes: bytes192(1), float64(7), int64(1)\n",
      "memory usage: 13.5 KB\n"
     ]
    }
   ],
   "source": [
    "data_2018_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 156 entries, 0 to 155\n",
      "Data columns (total 9 columns):\n",
      " #   Column                        Non-Null Count  Dtype  \n",
      "---  ------                        --------------  -----  \n",
      " 0   overall_rank                  156 non-null    int64  \n",
      " 1   country_or_region             156 non-null    |S24   \n",
      " 2   score                         156 non-null    float64\n",
      " 3   gdp_per_capita                156 non-null    float64\n",
      " 4   social_support                156 non-null    float64\n",
      " 5   healthy_life_expectancy       156 non-null    float64\n",
      " 6   freedom_to_make_life_choices  156 non-null    float64\n",
      " 7   generosity                    156 non-null    float64\n",
      " 8   perceptions_of_corruption     156 non-null    float64\n",
      "dtypes: bytes192(1), float64(7), int64(1)\n",
      "memory usage: 13.5 KB\n"
     ]
    }
   ],
   "source": [
    "data_2019_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_rank</th>\n",
       "      <th>score</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>social_support</th>\n",
       "      <th>healthy_life_expectancy</th>\n",
       "      <th>freedom_to_make_life_choices</th>\n",
       "      <th>generosity</th>\n",
       "      <th>perceptions_of_corruption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>78.500000</td>\n",
       "      <td>5.407096</td>\n",
       "      <td>0.905147</td>\n",
       "      <td>1.208814</td>\n",
       "      <td>0.725244</td>\n",
       "      <td>0.392571</td>\n",
       "      <td>0.184846</td>\n",
       "      <td>0.110603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>45.177428</td>\n",
       "      <td>1.113120</td>\n",
       "      <td>0.398389</td>\n",
       "      <td>0.299191</td>\n",
       "      <td>0.242124</td>\n",
       "      <td>0.143289</td>\n",
       "      <td>0.095254</td>\n",
       "      <td>0.094538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.853000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>39.750000</td>\n",
       "      <td>4.544500</td>\n",
       "      <td>0.602750</td>\n",
       "      <td>1.055750</td>\n",
       "      <td>0.547750</td>\n",
       "      <td>0.308000</td>\n",
       "      <td>0.108750</td>\n",
       "      <td>0.047000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>78.500000</td>\n",
       "      <td>5.379500</td>\n",
       "      <td>0.960000</td>\n",
       "      <td>1.271500</td>\n",
       "      <td>0.789000</td>\n",
       "      <td>0.417000</td>\n",
       "      <td>0.177500</td>\n",
       "      <td>0.085500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>117.250000</td>\n",
       "      <td>6.184500</td>\n",
       "      <td>1.232500</td>\n",
       "      <td>1.452500</td>\n",
       "      <td>0.881750</td>\n",
       "      <td>0.507250</td>\n",
       "      <td>0.248250</td>\n",
       "      <td>0.141250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>156.000000</td>\n",
       "      <td>7.769000</td>\n",
       "      <td>1.684000</td>\n",
       "      <td>1.624000</td>\n",
       "      <td>1.141000</td>\n",
       "      <td>0.631000</td>\n",
       "      <td>0.566000</td>\n",
       "      <td>0.453000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       overall_rank       score  gdp_per_capita  social_support  \\\n",
       "count    156.000000  156.000000      156.000000      156.000000   \n",
       "mean      78.500000    5.407096        0.905147        1.208814   \n",
       "std       45.177428    1.113120        0.398389        0.299191   \n",
       "min        1.000000    2.853000        0.000000        0.000000   \n",
       "25%       39.750000    4.544500        0.602750        1.055750   \n",
       "50%       78.500000    5.379500        0.960000        1.271500   \n",
       "75%      117.250000    6.184500        1.232500        1.452500   \n",
       "max      156.000000    7.769000        1.684000        1.624000   \n",
       "\n",
       "       healthy_life_expectancy  freedom_to_make_life_choices  generosity  \\\n",
       "count               156.000000                    156.000000  156.000000   \n",
       "mean                  0.725244                      0.392571    0.184846   \n",
       "std                   0.242124                      0.143289    0.095254   \n",
       "min                   0.000000                      0.000000    0.000000   \n",
       "25%                   0.547750                      0.308000    0.108750   \n",
       "50%                   0.789000                      0.417000    0.177500   \n",
       "75%                   0.881750                      0.507250    0.248250   \n",
       "max                   1.141000                      0.631000    0.566000   \n",
       "\n",
       "       perceptions_of_corruption  \n",
       "count                 156.000000  \n",
       "mean                    0.110603  \n",
       "std                     0.094538  \n",
       "min                     0.000000  \n",
       "25%                     0.047000  \n",
       "50%                     0.085500  \n",
       "75%                     0.141250  \n",
       "max                     0.453000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2019_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_rank</th>\n",
       "      <th>score</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>social_support</th>\n",
       "      <th>healthy_life_expectancy</th>\n",
       "      <th>freedom_to_make_life_choices</th>\n",
       "      <th>generosity</th>\n",
       "      <th>perceptions_of_corruption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>155.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>78.500000</td>\n",
       "      <td>5.375917</td>\n",
       "      <td>0.891449</td>\n",
       "      <td>1.213237</td>\n",
       "      <td>0.597346</td>\n",
       "      <td>0.454506</td>\n",
       "      <td>0.181006</td>\n",
       "      <td>0.112000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>45.177428</td>\n",
       "      <td>1.119506</td>\n",
       "      <td>0.391921</td>\n",
       "      <td>0.302372</td>\n",
       "      <td>0.247579</td>\n",
       "      <td>0.162424</td>\n",
       "      <td>0.098471</td>\n",
       "      <td>0.096492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.905000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>39.750000</td>\n",
       "      <td>4.453750</td>\n",
       "      <td>0.616250</td>\n",
       "      <td>1.066750</td>\n",
       "      <td>0.422250</td>\n",
       "      <td>0.356000</td>\n",
       "      <td>0.109500</td>\n",
       "      <td>0.051000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>78.500000</td>\n",
       "      <td>5.378000</td>\n",
       "      <td>0.949500</td>\n",
       "      <td>1.255000</td>\n",
       "      <td>0.644000</td>\n",
       "      <td>0.487000</td>\n",
       "      <td>0.174000</td>\n",
       "      <td>0.082000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>117.250000</td>\n",
       "      <td>6.168500</td>\n",
       "      <td>1.197750</td>\n",
       "      <td>1.463000</td>\n",
       "      <td>0.777250</td>\n",
       "      <td>0.578500</td>\n",
       "      <td>0.239000</td>\n",
       "      <td>0.137000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>156.000000</td>\n",
       "      <td>7.632000</td>\n",
       "      <td>2.096000</td>\n",
       "      <td>1.644000</td>\n",
       "      <td>1.030000</td>\n",
       "      <td>0.724000</td>\n",
       "      <td>0.598000</td>\n",
       "      <td>0.457000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       overall_rank       score  gdp_per_capita  social_support  \\\n",
       "count    156.000000  156.000000      156.000000      156.000000   \n",
       "mean      78.500000    5.375917        0.891449        1.213237   \n",
       "std       45.177428    1.119506        0.391921        0.302372   \n",
       "min        1.000000    2.905000        0.000000        0.000000   \n",
       "25%       39.750000    4.453750        0.616250        1.066750   \n",
       "50%       78.500000    5.378000        0.949500        1.255000   \n",
       "75%      117.250000    6.168500        1.197750        1.463000   \n",
       "max      156.000000    7.632000        2.096000        1.644000   \n",
       "\n",
       "       healthy_life_expectancy  freedom_to_make_life_choices  generosity  \\\n",
       "count               156.000000                    156.000000  156.000000   \n",
       "mean                  0.597346                      0.454506    0.181006   \n",
       "std                   0.247579                      0.162424    0.098471   \n",
       "min                   0.000000                      0.000000    0.000000   \n",
       "25%                   0.422250                      0.356000    0.109500   \n",
       "50%                   0.644000                      0.487000    0.174000   \n",
       "75%                   0.777250                      0.578500    0.239000   \n",
       "max                   1.030000                      0.724000    0.598000   \n",
       "\n",
       "       perceptions_of_corruption  \n",
       "count                 155.000000  \n",
       "mean                    0.112000  \n",
       "std                     0.096492  \n",
       "min                     0.000000  \n",
       "25%                     0.051000  \n",
       "50%                     0.082000  \n",
       "75%                     0.137000  \n",
       "max                     0.457000  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2018_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_rank</th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>score</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>social_support</th>\n",
       "      <th>healthy_life_expectancy</th>\n",
       "      <th>freedom_to_make_life_choices</th>\n",
       "      <th>generosity</th>\n",
       "      <th>perceptions_of_corruption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>123</td>\n",
       "      <td>b'Mozambique'</td>\n",
       "      <td>4.417</td>\n",
       "      <td>0.198</td>\n",
       "      <td>0.902</td>\n",
       "      <td>0.173</td>\n",
       "      <td>0.531</td>\n",
       "      <td>0.206</td>\n",
       "      <td>0.158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36</td>\n",
       "      <td>b'Spain'</td>\n",
       "      <td>6.310</td>\n",
       "      <td>1.251</td>\n",
       "      <td>1.538</td>\n",
       "      <td>0.965</td>\n",
       "      <td>0.449</td>\n",
       "      <td>0.142</td>\n",
       "      <td>0.074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>146</td>\n",
       "      <td>b'Botswana'</td>\n",
       "      <td>3.590</td>\n",
       "      <td>1.017</td>\n",
       "      <td>1.174</td>\n",
       "      <td>0.417</td>\n",
       "      <td>0.557</td>\n",
       "      <td>0.042</td>\n",
       "      <td>0.092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>150</td>\n",
       "      <td>b'Syria'</td>\n",
       "      <td>3.462</td>\n",
       "      <td>0.689</td>\n",
       "      <td>0.382</td>\n",
       "      <td>0.539</td>\n",
       "      <td>0.088</td>\n",
       "      <td>0.376</td>\n",
       "      <td>0.144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>b'Finland'</td>\n",
       "      <td>7.632</td>\n",
       "      <td>1.305</td>\n",
       "      <td>1.592</td>\n",
       "      <td>0.874</td>\n",
       "      <td>0.681</td>\n",
       "      <td>0.202</td>\n",
       "      <td>0.393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>107</td>\n",
       "      <td>b'Ivory Coast'</td>\n",
       "      <td>4.671</td>\n",
       "      <td>0.541</td>\n",
       "      <td>0.872</td>\n",
       "      <td>0.080</td>\n",
       "      <td>0.467</td>\n",
       "      <td>0.146</td>\n",
       "      <td>0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>69</td>\n",
       "      <td>b'Hungary'</td>\n",
       "      <td>5.620</td>\n",
       "      <td>1.171</td>\n",
       "      <td>1.401</td>\n",
       "      <td>0.732</td>\n",
       "      <td>0.259</td>\n",
       "      <td>0.061</td>\n",
       "      <td>0.022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>128</td>\n",
       "      <td>b'Georgia'</td>\n",
       "      <td>4.340</td>\n",
       "      <td>0.853</td>\n",
       "      <td>0.592</td>\n",
       "      <td>0.643</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.038</td>\n",
       "      <td>0.215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>b'Iceland'</td>\n",
       "      <td>7.495</td>\n",
       "      <td>1.343</td>\n",
       "      <td>1.644</td>\n",
       "      <td>0.914</td>\n",
       "      <td>0.677</td>\n",
       "      <td>0.353</td>\n",
       "      <td>0.138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>113</td>\n",
       "      <td>b'Sierra Leone'</td>\n",
       "      <td>4.571</td>\n",
       "      <td>0.256</td>\n",
       "      <td>0.813</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.355</td>\n",
       "      <td>0.238</td>\n",
       "      <td>0.053</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     overall_rank country_or_region  score  gdp_per_capita  social_support  \\\n",
       "122           123     b'Mozambique'  4.417           0.198           0.902   \n",
       "35             36          b'Spain'  6.310           1.251           1.538   \n",
       "145           146       b'Botswana'  3.590           1.017           1.174   \n",
       "149           150          b'Syria'  3.462           0.689           0.382   \n",
       "0               1        b'Finland'  7.632           1.305           1.592   \n",
       "106           107    b'Ivory Coast'  4.671           0.541           0.872   \n",
       "68             69        b'Hungary'  5.620           1.171           1.401   \n",
       "127           128        b'Georgia'  4.340           0.853           0.592   \n",
       "3               4        b'Iceland'  7.495           1.343           1.644   \n",
       "112           113   b'Sierra Leone'  4.571           0.256           0.813   \n",
       "\n",
       "     healthy_life_expectancy  freedom_to_make_life_choices  generosity  \\\n",
       "122                    0.173                         0.531       0.206   \n",
       "35                     0.965                         0.449       0.142   \n",
       "145                    0.417                         0.557       0.042   \n",
       "149                    0.539                         0.088       0.376   \n",
       "0                      0.874                         0.681       0.202   \n",
       "106                    0.080                         0.467       0.146   \n",
       "68                     0.732                         0.259       0.061   \n",
       "127                    0.643                         0.375       0.038   \n",
       "3                      0.914                         0.677       0.353   \n",
       "112                    0.000                         0.355       0.238   \n",
       "\n",
       "     perceptions_of_corruption  \n",
       "122                      0.158  \n",
       "35                       0.074  \n",
       "145                      0.092  \n",
       "149                      0.144  \n",
       "0                        0.393  \n",
       "106                      0.103  \n",
       "68                       0.022  \n",
       "127                      0.215  \n",
       "3                        0.138  \n",
       "112                      0.053  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2018_df.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import jovian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[jovian] Attempting to save notebook..\u001b[0m\n",
      "[jovian] Updating notebook \"mgauthamvarma/world-happyness-index-analysis\" on https://jovian.ml/\u001b[0m\n",
      "[jovian] Uploading notebook..\u001b[0m\n",
      "[jovian] Capturing environment..\u001b[0m\n",
      "[jovian] Committed successfully! https://jovian.ml/mgauthamvarma/world-happyness-index-analysis\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'https://jovian.ml/mgauthamvarma/world-happyness-index-analysis'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jovian.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory Analysis and Visualization\n",
    "\n",
    "**TODO** - write some explanation here.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Instructions (delete this cell)\n",
    "> \n",
    "> - Compute the mean, sum, range and other interesting statistics for numeric columns\n",
    "> - Explore distributions of numeric columns using histograms etc.\n",
    "> - Explore relationship between columns using scatter plots, bar charts etc.\n",
    "> - Make a note of interesting insights from the exploratory analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's begin by importing`matplotlib.pyplot` and `seaborn`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "sns.set_style('darkgrid')\n",
    "matplotlib.rcParams['font.size'] = 14\n",
    "matplotlib.rcParams['figure.figsize'] = (9, 5)\n",
    "matplotlib.rcParams['figure.facecolor'] = '#00000000'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_countries = data_2019_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_rank</th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>score</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>social_support</th>\n",
       "      <th>healthy_life_expectancy</th>\n",
       "      <th>freedom_to_make_life_choices</th>\n",
       "      <th>generosity</th>\n",
       "      <th>perceptions_of_corruption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>b'Finland'</td>\n",
       "      <td>7.769</td>\n",
       "      <td>1.340</td>\n",
       "      <td>1.587</td>\n",
       "      <td>0.986</td>\n",
       "      <td>0.596</td>\n",
       "      <td>0.153</td>\n",
       "      <td>0.393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>b'Denmark'</td>\n",
       "      <td>7.600</td>\n",
       "      <td>1.383</td>\n",
       "      <td>1.573</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.592</td>\n",
       "      <td>0.252</td>\n",
       "      <td>0.410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>b'Norway'</td>\n",
       "      <td>7.554</td>\n",
       "      <td>1.488</td>\n",
       "      <td>1.582</td>\n",
       "      <td>1.028</td>\n",
       "      <td>0.603</td>\n",
       "      <td>0.271</td>\n",
       "      <td>0.341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>b'Iceland'</td>\n",
       "      <td>7.494</td>\n",
       "      <td>1.380</td>\n",
       "      <td>1.624</td>\n",
       "      <td>1.026</td>\n",
       "      <td>0.591</td>\n",
       "      <td>0.354</td>\n",
       "      <td>0.118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>b'Netherlands'</td>\n",
       "      <td>7.488</td>\n",
       "      <td>1.396</td>\n",
       "      <td>1.522</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.557</td>\n",
       "      <td>0.322</td>\n",
       "      <td>0.298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>b'Switzerland'</td>\n",
       "      <td>7.480</td>\n",
       "      <td>1.452</td>\n",
       "      <td>1.526</td>\n",
       "      <td>1.052</td>\n",
       "      <td>0.572</td>\n",
       "      <td>0.263</td>\n",
       "      <td>0.343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>b'Sweden'</td>\n",
       "      <td>7.343</td>\n",
       "      <td>1.387</td>\n",
       "      <td>1.487</td>\n",
       "      <td>1.009</td>\n",
       "      <td>0.574</td>\n",
       "      <td>0.267</td>\n",
       "      <td>0.373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>b'New Zealand'</td>\n",
       "      <td>7.307</td>\n",
       "      <td>1.303</td>\n",
       "      <td>1.557</td>\n",
       "      <td>1.026</td>\n",
       "      <td>0.585</td>\n",
       "      <td>0.330</td>\n",
       "      <td>0.380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>b'Canada'</td>\n",
       "      <td>7.278</td>\n",
       "      <td>1.365</td>\n",
       "      <td>1.505</td>\n",
       "      <td>1.039</td>\n",
       "      <td>0.584</td>\n",
       "      <td>0.285</td>\n",
       "      <td>0.308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>b'Austria'</td>\n",
       "      <td>7.246</td>\n",
       "      <td>1.376</td>\n",
       "      <td>1.475</td>\n",
       "      <td>1.016</td>\n",
       "      <td>0.532</td>\n",
       "      <td>0.244</td>\n",
       "      <td>0.226</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   overall_rank country_or_region  score  gdp_per_capita  social_support  \\\n",
       "0             1        b'Finland'  7.769           1.340           1.587   \n",
       "1             2        b'Denmark'  7.600           1.383           1.573   \n",
       "2             3         b'Norway'  7.554           1.488           1.582   \n",
       "3             4        b'Iceland'  7.494           1.380           1.624   \n",
       "4             5    b'Netherlands'  7.488           1.396           1.522   \n",
       "5             6    b'Switzerland'  7.480           1.452           1.526   \n",
       "6             7         b'Sweden'  7.343           1.387           1.487   \n",
       "7             8    b'New Zealand'  7.307           1.303           1.557   \n",
       "8             9         b'Canada'  7.278           1.365           1.505   \n",
       "9            10        b'Austria'  7.246           1.376           1.475   \n",
       "\n",
       "   healthy_life_expectancy  freedom_to_make_life_choices  generosity  \\\n",
       "0                    0.986                         0.596       0.153   \n",
       "1                    0.996                         0.592       0.252   \n",
       "2                    1.028                         0.603       0.271   \n",
       "3                    1.026                         0.591       0.354   \n",
       "4                    0.999                         0.557       0.322   \n",
       "5                    1.052                         0.572       0.263   \n",
       "6                    1.009                         0.574       0.267   \n",
       "7                    1.026                         0.585       0.330   \n",
       "8                    1.039                         0.584       0.285   \n",
       "9                    1.016                         0.532       0.244   \n",
       "\n",
       "   perceptions_of_corruption  \n",
       "0                      0.393  \n",
       "1                      0.410  \n",
       "2                      0.341  \n",
       "3                      0.118  \n",
       "4                      0.298  \n",
       "5                      0.343  \n",
       "6                      0.373  \n",
       "7                      0.380  \n",
       "8                      0.308  \n",
       "9                      0.226  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_countries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO** - Explore one or more columns by plotting a graph below, and add some explanation about it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us observe how different factors effect each other and overall rank for the topn ten countries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='gdp_per_capita', ylabel='perceptions_of_corruption'>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2,3)\n",
    "plt.tight_layout(pad =2)\n",
    "fig.autofmt_xdate(rotation= 70)\n",
    "sns.barplot(round(top_countries.gdp_per_capita,4),top_countries.score,ax = axes[0,0])\n",
    "sns.barplot(round(top_countries.gdp_per_capita,4),top_countries.social_support,ax = axes[0,1])\n",
    "sns.barplot(round(top_countries.gdp_per_capita,4),top_countries.healthy_life_expectancy,ax = axes[0,2])\n",
    "sns.barplot(round(top_countries.gdp_per_capita,4),top_countries.freedom_to_make_life_choices,ax = axes[1,0])\n",
    "sns.barplot(round(top_countries.gdp_per_capita,4),top_countries.generosity,ax = axes[1,1])\n",
    "sns.barplot(round(top_countries.gdp_per_capita,4),top_countries.perceptions_of_corruption,ax = axes[1,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='social_support', ylabel='perceptions_of_corruption'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2,3)\n",
    "plt.tight_layout(pad =1)\n",
    "fig.autofmt_xdate(rotation= 70)\n",
    "sns.barplot(round(top_countries.social_support,4),top_countries.score,ax = axes[0,0])\n",
    "sns.barplot(round(top_countries.social_support,4),top_countries.gdp_per_capita,ax = axes[0,1])\n",
    "sns.barplot(round(top_countries.social_support,4),top_countries.healthy_life_expectancy,ax = axes[0,2])\n",
    "sns.barplot(round(top_countries.social_support,4),top_countries.freedom_to_make_life_choices,ax = axes[1,0])\n",
    "sns.barplot(round(top_countries.social_support,4),top_countries.generosity,ax = axes[1,1])\n",
    "sns.barplot(round(top_countries.social_support,4),top_countries.perceptions_of_corruption,ax = axes[1,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='generosity', ylabel='perceptions_of_corruption'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2,3)\n",
    "plt.tight_layout(pad =3)\n",
    "fig.autofmt_xdate(rotation= 70)\n",
    "sns.barplot(round(top_countries.generosity,4),top_countries.score,ax = axes[0,0])\n",
    "sns.barplot(round(top_countries.generosity,4),top_countries.gdp_per_capita,ax = axes[0,1])\n",
    "sns.barplot(round(top_countries.generosity,4),top_countries.healthy_life_expectancy,ax = axes[0,2])\n",
    "sns.barplot(round(top_countries.generosity,4),top_countries.freedom_to_make_life_choices,ax = axes[1,0])\n",
    "sns.barplot(round(top_countries.generosity,4),top_countries.social_support,ax = axes[1,1])\n",
    "sns.barplot(round(top_countries.generosity,4),top_countries.perceptions_of_corruption,ax = axes[1,2])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='healthy_life_expectancy', ylabel='perceptions_of_corruption'>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2,3)\n",
    "plt.tight_layout(pad =1)\n",
    "fig.autofmt_xdate(rotation= 70)\n",
    "sns.barplot(round(top_countries.healthy_life_expectancy,4),top_countries.score,ax = axes[0,0])\n",
    "sns.barplot(round(top_countries.healthy_life_expectancy,4),top_countries.gdp_per_capita,ax = axes[0,1])\n",
    "sns.barplot(round(top_countries.healthy_life_expectancy,4),top_countries.social_support,ax = axes[0,2])\n",
    "sns.barplot(round(top_countries.healthy_life_expectancy,4),top_countries.freedom_to_make_life_choices,ax = axes[1,0])\n",
    "sns.barplot(round(top_countries.healthy_life_expectancy,4),top_countries.generosity,ax = axes[1,1])\n",
    "sns.barplot(round(top_countries.healthy_life_expectancy,4),top_countries.perceptions_of_corruption,ax = axes[1,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='freedom_to_make_life_choices', ylabel='perceptions_of_corruption'>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2,3)\n",
    "plt.tight_layout(pad =1)\n",
    "fig.autofmt_xdate(rotation= 70)\n",
    "sns.barplot(round(top_countries.freedom_to_make_life_choices,4),top_countries.score,ax = axes[0,0])\n",
    "sns.barplot(round(top_countries.freedom_to_make_life_choices,4),top_countries.gdp_per_capita,ax = axes[0,1])\n",
    "sns.barplot(round(top_countries.freedom_to_make_life_choices,4),top_countries.healthy_life_expectancy,ax = axes[0,2])\n",
    "sns.barplot(round(top_countries.freedom_to_make_life_choices,4),top_countries.social_support,ax = axes[1,0])\n",
    "sns.barplot(round(top_countries.freedom_to_make_life_choices,4),top_countries.generosity,ax = axes[1,1])\n",
    "sns.barplot(round(top_countries.freedom_to_make_life_choices,4),top_countries.perceptions_of_corruption,ax = axes[1,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='perceptions_of_corruption', ylabel='gdp_per_capita'>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2,3)\n",
    "plt.tight_layout(pad =1)\n",
    "fig.autofmt_xdate(rotation= 70)\n",
    "sns.barplot(round(top_countries.perceptions_of_corruption,4),top_countries.score,ax = axes[0,0])\n",
    "sns.barplot(round(top_countries.perceptions_of_corruption,4),top_countries.social_support,ax = axes[0,1])\n",
    "sns.barplot(round(top_countries.perceptions_of_corruption,4),top_countries.healthy_life_expectancy,ax = axes[0,2])\n",
    "sns.barplot(round(top_countries.perceptions_of_corruption,4),top_countries.freedom_to_make_life_choices,ax = axes[1,0])\n",
    "sns.barplot(round(top_countries.perceptions_of_corruption,4),top_countries.generosity,ax = axes[1,1])\n",
    "sns.barplot(round(top_countries.perceptions_of_corruption,4),top_countries.gdp_per_capita,ax = axes[1,2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above graphs we can observe that most of the factors were pretty close to each other for the top ten countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO** - Explore one or more columns by plotting a graph below, and add some explanation about it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='score', ylabel='overall_rank'>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(data_2019_df.score,data_2019_df.overall_rank)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can observe that as the score increases rank decreases, so higher the scores to the country  better is the hapiness index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO** - Explore one or more columns by plotting a graph below, and add some explanation about it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='perceptions_of_corruption', ylabel='overall_rank'>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(data_2019_df.perceptions_of_corruption,data_2019_df.overall_rank)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can observe that as the perseptions of corruption increases the overall rank is significantly low. One thing to note is that higher the perseption index lower the corruption. Hence it is a clear indication that happiness index score is relatiely high for the countries with lower prseption index. Some countries which have low perseption index but also have low score may be due to other factors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO** - Explore one or more columns by plotting a graph below, and add some explanation about it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='gdp_per_capita', ylabel='overall_rank'>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(data_2019_df.gdp_per_capita,data_2019_df.overall_rank)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " We can observe a down ward trend in the above plot, that is as the GDP gets higher, overall rank gets to lower numbers. So people in countries with higher GDP are more likely to be happier than people in the countries with low GDP."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**TODO** - Explore one or more columns by plotting a graph below, and add some explanation about it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='social_support', ylabel='generosity'>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(data_2019_df.social_support,data_2019_df.generosity)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that generosity and social_support are inter related. People having more social_support tend to show more generosity. From the above graph we observe that almost 90 percent of people who show some generosity are people who have a social support of greater than 0.7."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us save and upload our work to Jovian before continuing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "import jovian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[jovian] Attempting to save notebook..\u001b[0m\n",
      "[jovian] Updating notebook \"mgauthamvarma/world-happyness-index-analysis\" on https://jovian.ml/\u001b[0m\n",
      "[jovian] Uploading notebook..\u001b[0m\n",
      "[jovian] Capturing environment..\u001b[0m\n",
      "[jovian] Committed successfully! https://jovian.ml/mgauthamvarma/world-happyness-index-analysis\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'https://jovian.ml/mgauthamvarma/world-happyness-index-analysis'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jovian.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Instructions (delete this cell)\n",
    ">\n",
    "> - Ask at least 5 interesting questions about your dataset\n",
    "> - Answer the questions either by computing the results using Numpy/Pandas or by plotting graphs using Matplotlib/Seaborn\n",
    "> - Create new columns, merge multiple dataset and perform grouping/aggregation wherever necessary\n",
    "> - Wherever you're using a library function from Pandas/Numpy/Matplotlib etc. explain briefly what it does\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Q1: What are the top ten most corrupted countries?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_rank</th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>score</th>\n",
       "      <th>gdp_per_capita</th>\n",
       "      <th>social_support</th>\n",
       "      <th>healthy_life_expectancy</th>\n",
       "      <th>freedom_to_make_life_choices</th>\n",
       "      <th>generosity</th>\n",
       "      <th>perceptions_of_corruption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>71</td>\n",
       "      <td>b'Moldova'</td>\n",
       "      <td>5.529</td>\n",
       "      <td>0.685</td>\n",
       "      <td>1.328</td>\n",
       "      <td>0.739</td>\n",
       "      <td>0.245</td>\n",
       "      <td>0.181</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>b'Bulgaria'</td>\n",
       "      <td>5.011</td>\n",
       "      <td>1.092</td>\n",
       "      <td>1.513</td>\n",
       "      <td>0.815</td>\n",
       "      <td>0.311</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>b'Romania'</td>\n",
       "      <td>6.070</td>\n",
       "      <td>1.162</td>\n",
       "      <td>1.232</td>\n",
       "      <td>0.825</td>\n",
       "      <td>0.462</td>\n",
       "      <td>0.083</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>b'Kosovo'</td>\n",
       "      <td>6.100</td>\n",
       "      <td>0.882</td>\n",
       "      <td>1.232</td>\n",
       "      <td>0.758</td>\n",
       "      <td>0.489</td>\n",
       "      <td>0.262</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>78</td>\n",
       "      <td>b'Bosnia and Herzegovina'</td>\n",
       "      <td>5.386</td>\n",
       "      <td>0.945</td>\n",
       "      <td>1.212</td>\n",
       "      <td>0.845</td>\n",
       "      <td>0.212</td>\n",
       "      <td>0.263</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>133</td>\n",
       "      <td>b'Ukraine'</td>\n",
       "      <td>4.332</td>\n",
       "      <td>0.820</td>\n",
       "      <td>1.390</td>\n",
       "      <td>0.739</td>\n",
       "      <td>0.178</td>\n",
       "      <td>0.187</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>b'Slovakia'</td>\n",
       "      <td>6.198</td>\n",
       "      <td>1.246</td>\n",
       "      <td>1.504</td>\n",
       "      <td>0.881</td>\n",
       "      <td>0.334</td>\n",
       "      <td>0.121</td>\n",
       "      <td>0.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>b'Trinidad &amp; Tobago'</td>\n",
       "      <td>6.192</td>\n",
       "      <td>1.231</td>\n",
       "      <td>1.477</td>\n",
       "      <td>0.713</td>\n",
       "      <td>0.489</td>\n",
       "      <td>0.185</td>\n",
       "      <td>0.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>b'Hungary'</td>\n",
       "      <td>5.758</td>\n",
       "      <td>1.201</td>\n",
       "      <td>1.410</td>\n",
       "      <td>0.828</td>\n",
       "      <td>0.199</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>75</td>\n",
       "      <td>b'Croatia'</td>\n",
       "      <td>5.432</td>\n",
       "      <td>1.155</td>\n",
       "      <td>1.266</td>\n",
       "      <td>0.914</td>\n",
       "      <td>0.296</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.022</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     overall_rank          country_or_region  score  gdp_per_capita  \\\n",
       "70             71                 b'Moldova'  5.529           0.685   \n",
       "96             97                b'Bulgaria'  5.011           1.092   \n",
       "47             48                 b'Romania'  6.070           1.162   \n",
       "45             46                  b'Kosovo'  6.100           0.882   \n",
       "77             78  b'Bosnia and Herzegovina'  5.386           0.945   \n",
       "132           133                 b'Ukraine'  4.332           0.820   \n",
       "37             38                b'Slovakia'  6.198           1.246   \n",
       "38             39       b'Trinidad & Tobago'  6.192           1.231   \n",
       "61             62                 b'Hungary'  5.758           1.201   \n",
       "74             75                 b'Croatia'  5.432           1.155   \n",
       "\n",
       "     social_support  healthy_life_expectancy  freedom_to_make_life_choices  \\\n",
       "70            1.328                    0.739                         0.245   \n",
       "96            1.513                    0.815                         0.311   \n",
       "47            1.232                    0.825                         0.462   \n",
       "45            1.232                    0.758                         0.489   \n",
       "77            1.212                    0.845                         0.212   \n",
       "132           1.390                    0.739                         0.178   \n",
       "37            1.504                    0.881                         0.334   \n",
       "38            1.477                    0.713                         0.489   \n",
       "61            1.410                    0.828                         0.199   \n",
       "74            1.266                    0.914                         0.296   \n",
       "\n",
       "     generosity  perceptions_of_corruption  \n",
       "70        0.181                      0.000  \n",
       "96        0.081                      0.004  \n",
       "47        0.083                      0.005  \n",
       "45        0.262                      0.006  \n",
       "77        0.263                      0.006  \n",
       "132       0.187                      0.010  \n",
       "37        0.121                      0.014  \n",
       "38        0.185                      0.016  \n",
       "61        0.081                      0.020  \n",
       "74        0.119                      0.022  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "most_corrupt = data_2019_df.sort_values('perceptions_of_corruption',ascending = True).head(10)\n",
    "most_corrupt\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here perseptions of corruption is zero for Moldova, so either it can be the most corrupted country or its values are missing and in that case Bulgaria is the most corrupted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Q2: Which countries improved their happiness indes from 2018 to 2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>overall_rank_x</th>\n",
       "      <th>overall_rank_y</th>\n",
       "      <th>score_x</th>\n",
       "      <th>score_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b'Finland'</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7.769</td>\n",
       "      <td>7.632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b'Denmark'</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>7.600</td>\n",
       "      <td>7.555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>b'Norway'</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>7.554</td>\n",
       "      <td>7.594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b'Iceland'</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>7.494</td>\n",
       "      <td>7.495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>b'Netherlands'</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>7.488</td>\n",
       "      <td>7.441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>b'Rwanda'</td>\n",
       "      <td>152</td>\n",
       "      <td>151</td>\n",
       "      <td>3.334</td>\n",
       "      <td>3.408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>b'Tanzania'</td>\n",
       "      <td>153</td>\n",
       "      <td>153</td>\n",
       "      <td>3.231</td>\n",
       "      <td>3.303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>b'Afghanistan'</td>\n",
       "      <td>154</td>\n",
       "      <td>145</td>\n",
       "      <td>3.203</td>\n",
       "      <td>3.632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>b'Central African Republic'</td>\n",
       "      <td>155</td>\n",
       "      <td>155</td>\n",
       "      <td>3.083</td>\n",
       "      <td>3.083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>b'South Sudan'</td>\n",
       "      <td>156</td>\n",
       "      <td>154</td>\n",
       "      <td>2.853</td>\n",
       "      <td>3.254</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>152 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               country_or_region  overall_rank_x  overall_rank_y  score_x  \\\n",
       "0                     b'Finland'               1               1    7.769   \n",
       "1                     b'Denmark'               2               3    7.600   \n",
       "2                      b'Norway'               3               2    7.554   \n",
       "3                     b'Iceland'               4               4    7.494   \n",
       "4                 b'Netherlands'               5               6    7.488   \n",
       "..                           ...             ...             ...      ...   \n",
       "147                    b'Rwanda'             152             151    3.334   \n",
       "148                  b'Tanzania'             153             153    3.231   \n",
       "149               b'Afghanistan'             154             145    3.203   \n",
       "150  b'Central African Republic'             155             155    3.083   \n",
       "151               b'South Sudan'             156             154    2.853   \n",
       "\n",
       "     score_y  \n",
       "0      7.632  \n",
       "1      7.555  \n",
       "2      7.594  \n",
       "3      7.495  \n",
       "4      7.441  \n",
       "..       ...  \n",
       "147    3.408  \n",
       "148    3.303  \n",
       "149    3.632  \n",
       "150    3.083  \n",
       "151    3.254  \n",
       "\n",
       "[152 rows x 5 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_df = data_2019_df.merge(data_2018_df,on = 'country_or_region')\n",
    "combined_df[['country_or_region','overall_rank_x','overall_rank_y','score_x','score_y']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_df['diff_in_rank'] = combined_df.overall_rank_y - combined_df.overall_rank_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "improved_ranks = combined_df[['country_or_region','overall_rank_x','overall_rank_y','diff_in_rank']][combined_df.diff_in_rank > 0].sort_values('diff_in_rank',ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "country_or_region    71\n",
       "overall_rank_x       71\n",
       "overall_rank_y       71\n",
       "diff_in_rank         71\n",
       "dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "improved_ranks.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>overall_rank_x</th>\n",
       "      <th>overall_rank_y</th>\n",
       "      <th>diff_in_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>b'Benin'</td>\n",
       "      <td>102</td>\n",
       "      <td>136</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>b'Guinea'</td>\n",
       "      <td>118</td>\n",
       "      <td>140</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>b'Niger'</td>\n",
       "      <td>114</td>\n",
       "      <td>134</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>b'Kosovo'</td>\n",
       "      <td>46</td>\n",
       "      <td>66</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>b'Bosnia and Herzegovina'</td>\n",
       "      <td>78</td>\n",
       "      <td>93</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>b'Taiwan'</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>b'Mexico'</td>\n",
       "      <td>23</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>b'Czech Republic'</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>b'Costa Rica'</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>b'Yemen'</td>\n",
       "      <td>151</td>\n",
       "      <td>152</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>71 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             country_or_region  overall_rank_x  overall_rank_y  diff_in_rank\n",
       "100                   b'Benin'             102             136            34\n",
       "116                  b'Guinea'             118             140            22\n",
       "112                   b'Niger'             114             134            20\n",
       "45                   b'Kosovo'              46              66            20\n",
       "77   b'Bosnia and Herzegovina'              78              93            15\n",
       "..                         ...             ...             ...           ...\n",
       "24                   b'Taiwan'              25              26             1\n",
       "22                   b'Mexico'              23              24             1\n",
       "19           b'Czech Republic'              20              21             1\n",
       "11               b'Costa Rica'              12              13             1\n",
       "146                   b'Yemen'             151             152             1\n",
       "\n",
       "[71 rows x 4 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "improved_ranks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SO a total of 71 ccountries improved their ranks from 2018 to 2019.Of them benin improved the highest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_rank_x</th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>score_x</th>\n",
       "      <th>gdp_per_capita_x</th>\n",
       "      <th>social_support_x</th>\n",
       "      <th>healthy_life_expectancy_x</th>\n",
       "      <th>freedom_to_make_life_choices_x</th>\n",
       "      <th>generosity_x</th>\n",
       "      <th>perceptions_of_corruption_x</th>\n",
       "      <th>overall_rank_y</th>\n",
       "      <th>score_y</th>\n",
       "      <th>gdp_per_capita_y</th>\n",
       "      <th>social_support_y</th>\n",
       "      <th>healthy_life_expectancy_y</th>\n",
       "      <th>freedom_to_make_life_choices_y</th>\n",
       "      <th>generosity_y</th>\n",
       "      <th>perceptions_of_corruption_y</th>\n",
       "      <th>diff_in_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>102</td>\n",
       "      <td>b'Benin'</td>\n",
       "      <td>4.883</td>\n",
       "      <td>0.393</td>\n",
       "      <td>0.437</td>\n",
       "      <td>0.397</td>\n",
       "      <td>0.349</td>\n",
       "      <td>0.175</td>\n",
       "      <td>0.082</td>\n",
       "      <td>136</td>\n",
       "      <td>4.141</td>\n",
       "      <td>0.378</td>\n",
       "      <td>0.372</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.163</td>\n",
       "      <td>0.067</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     overall_rank_x country_or_region  score_x  gdp_per_capita_x  \\\n",
       "100             102          b'Benin'    4.883             0.393   \n",
       "\n",
       "     social_support_x  healthy_life_expectancy_x  \\\n",
       "100             0.437                      0.397   \n",
       "\n",
       "     freedom_to_make_life_choices_x  generosity_x  \\\n",
       "100                           0.349         0.175   \n",
       "\n",
       "     perceptions_of_corruption_x  overall_rank_y  score_y  gdp_per_capita_y  \\\n",
       "100                        0.082             136    4.141             0.378   \n",
       "\n",
       "     social_support_y  healthy_life_expectancy_y  \\\n",
       "100             0.372                       0.24   \n",
       "\n",
       "     freedom_to_make_life_choices_y  generosity_y  \\\n",
       "100                            0.44         0.163   \n",
       "\n",
       "     perceptions_of_corruption_y  diff_in_rank  \n",
       "100                        0.067            34  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_df[combined_df.country_or_region == b'Benin']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Q3: Which countries got down in their happiness indes from 2018 to 2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "degraded_ranks = improved_ranks = combined_df[['country_or_region','overall_rank_x','overall_rank_y','diff_in_rank']][combined_df.diff_in_rank < 0].sort_values('diff_in_rank',ascending = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>overall_rank_x</th>\n",
       "      <th>overall_rank_y</th>\n",
       "      <th>diff_in_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>b'Malaysia'</td>\n",
       "      <td>80</td>\n",
       "      <td>35</td>\n",
       "      <td>-45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>b'Turkmenistan'</td>\n",
       "      <td>87</td>\n",
       "      <td>68</td>\n",
       "      <td>-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>b'Argentina'</td>\n",
       "      <td>47</td>\n",
       "      <td>29</td>\n",
       "      <td>-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>b'Sierra Leone'</td>\n",
       "      <td>129</td>\n",
       "      <td>113</td>\n",
       "      <td>-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>b'Egypt'</td>\n",
       "      <td>137</td>\n",
       "      <td>122</td>\n",
       "      <td>-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>b'France'</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>b'Chile'</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>b'Trinidad &amp; Tobago'</td>\n",
       "      <td>39</td>\n",
       "      <td>38</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>b'United States'</td>\n",
       "      <td>19</td>\n",
       "      <td>18</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>b'Norway'</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        country_or_region  overall_rank_x  overall_rank_y  diff_in_rank\n",
       "79            b'Malaysia'              80              35           -45\n",
       "85        b'Turkmenistan'              87              68           -19\n",
       "46           b'Argentina'              47              29           -18\n",
       "126       b'Sierra Leone'             129             113           -16\n",
       "133              b'Egypt'             137             122           -15\n",
       "..                    ...             ...             ...           ...\n",
       "23              b'France'              24              23            -1\n",
       "25               b'Chile'              26              25            -1\n",
       "38   b'Trinidad & Tobago'              39              38            -1\n",
       "18       b'United States'              19              18            -1\n",
       "2               b'Norway'               3               2            -1\n",
       "\n",
       "[66 rows x 4 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "degraded_ranks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "country_or_region    66\n",
       "overall_rank_x       66\n",
       "overall_rank_y       66\n",
       "diff_in_rank         66\n",
       "dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "degraded_ranks.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Malaysia got down from rank 35 to rank 80 and there are 66 other countries whose rank got degraded"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Q4: Which countries have therir ranks same in both the years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "same_ranks = improved_ranks = combined_df[['country_or_region','overall_rank_x','overall_rank_y','diff_in_rank']][combined_df.diff_in_rank == 0].sort_values('overall_rank_x',ascending = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "country_or_region    15\n",
       "overall_rank_x       15\n",
       "overall_rank_y       15\n",
       "diff_in_rank         15\n",
       "dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "same_ranks.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>overall_rank_x</th>\n",
       "      <th>overall_rank_y</th>\n",
       "      <th>diff_in_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b'Finland'</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b'Iceland'</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>b'New Zealand'</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>b'Malta'</td>\n",
       "      <td>22</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>b'Singapore'</td>\n",
       "      <td>34</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>b'Latvia'</td>\n",
       "      <td>53</td>\n",
       "      <td>53</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>b'Jamaica'</td>\n",
       "      <td>56</td>\n",
       "      <td>56</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>b'Kazakhstan'</td>\n",
       "      <td>60</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>b'Peru'</td>\n",
       "      <td>65</td>\n",
       "      <td>65</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>b'Hong Kong'</td>\n",
       "      <td>76</td>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>b'Mozambique'</td>\n",
       "      <td>123</td>\n",
       "      <td>123</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>b'Togo'</td>\n",
       "      <td>139</td>\n",
       "      <td>139</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>b'Madagascar'</td>\n",
       "      <td>143</td>\n",
       "      <td>143</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>b'Tanzania'</td>\n",
       "      <td>153</td>\n",
       "      <td>153</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>b'Central African Republic'</td>\n",
       "      <td>155</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               country_or_region  overall_rank_x  overall_rank_y  diff_in_rank\n",
       "0                     b'Finland'               1               1             0\n",
       "3                     b'Iceland'               4               4             0\n",
       "7                 b'New Zealand'               8               8             0\n",
       "21                      b'Malta'              22              22             0\n",
       "33                  b'Singapore'              34              34             0\n",
       "52                     b'Latvia'              53              53             0\n",
       "55                    b'Jamaica'              56              56             0\n",
       "59                 b'Kazakhstan'              60              60             0\n",
       "64                       b'Peru'              65              65             0\n",
       "75                  b'Hong Kong'              76              76             0\n",
       "120                b'Mozambique'             123             123             0\n",
       "135                      b'Togo'             139             139             0\n",
       "138                b'Madagascar'             143             143             0\n",
       "148                  b'Tanzania'             153             153             0\n",
       "150  b'Central African Republic'             155             155             0"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "same_ranks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are fifteen countries which retained thir ranks and we can also observe that Finland has thee highest number of happy people in bth the years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Q5: Which country/countries has the least happiness index in both the years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_rank_x</th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>score_x</th>\n",
       "      <th>gdp_per_capita_x</th>\n",
       "      <th>social_support_x</th>\n",
       "      <th>healthy_life_expectancy_x</th>\n",
       "      <th>freedom_to_make_life_choices_x</th>\n",
       "      <th>generosity_x</th>\n",
       "      <th>perceptions_of_corruption_x</th>\n",
       "      <th>overall_rank_y</th>\n",
       "      <th>score_y</th>\n",
       "      <th>gdp_per_capita_y</th>\n",
       "      <th>social_support_y</th>\n",
       "      <th>healthy_life_expectancy_y</th>\n",
       "      <th>freedom_to_make_life_choices_y</th>\n",
       "      <th>generosity_y</th>\n",
       "      <th>perceptions_of_corruption_y</th>\n",
       "      <th>diff_in_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>156</td>\n",
       "      <td>b'South Sudan'</td>\n",
       "      <td>2.853</td>\n",
       "      <td>0.306</td>\n",
       "      <td>0.575</td>\n",
       "      <td>0.295</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.202</td>\n",
       "      <td>0.091</td>\n",
       "      <td>154</td>\n",
       "      <td>3.254</td>\n",
       "      <td>0.337</td>\n",
       "      <td>0.608</td>\n",
       "      <td>0.177</td>\n",
       "      <td>0.112</td>\n",
       "      <td>0.224</td>\n",
       "      <td>0.106</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     overall_rank_x country_or_region  score_x  gdp_per_capita_x  \\\n",
       "151             156    b'South Sudan'    2.853             0.306   \n",
       "\n",
       "     social_support_x  healthy_life_expectancy_x  \\\n",
       "151             0.575                      0.295   \n",
       "\n",
       "     freedom_to_make_life_choices_x  generosity_x  \\\n",
       "151                            0.01         0.202   \n",
       "\n",
       "     perceptions_of_corruption_x  overall_rank_y  score_y  gdp_per_capita_y  \\\n",
       "151                        0.091             154    3.254             0.337   \n",
       "\n",
       "     social_support_y  healthy_life_expectancy_y  \\\n",
       "151             0.608                      0.177   \n",
       "\n",
       "     freedom_to_make_life_choices_y  generosity_y  \\\n",
       "151                           0.112         0.224   \n",
       "\n",
       "     perceptions_of_corruption_y  diff_in_rank  \n",
       "151                        0.106            -2  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_df.sort_values('overall_rank_x', ascending = False).head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_rank_x</th>\n",
       "      <th>country_or_region</th>\n",
       "      <th>score_x</th>\n",
       "      <th>gdp_per_capita_x</th>\n",
       "      <th>social_support_x</th>\n",
       "      <th>healthy_life_expectancy_x</th>\n",
       "      <th>freedom_to_make_life_choices_x</th>\n",
       "      <th>generosity_x</th>\n",
       "      <th>perceptions_of_corruption_x</th>\n",
       "      <th>overall_rank_y</th>\n",
       "      <th>score_y</th>\n",
       "      <th>gdp_per_capita_y</th>\n",
       "      <th>social_support_y</th>\n",
       "      <th>healthy_life_expectancy_y</th>\n",
       "      <th>freedom_to_make_life_choices_y</th>\n",
       "      <th>generosity_y</th>\n",
       "      <th>perceptions_of_corruption_y</th>\n",
       "      <th>diff_in_rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>145</td>\n",
       "      <td>b'Burundi'</td>\n",
       "      <td>3.775</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.447</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.176</td>\n",
       "      <td>0.18</td>\n",
       "      <td>156</td>\n",
       "      <td>2.905</td>\n",
       "      <td>0.091</td>\n",
       "      <td>0.627</td>\n",
       "      <td>0.145</td>\n",
       "      <td>0.065</td>\n",
       "      <td>0.149</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     overall_rank_x country_or_region  score_x  gdp_per_capita_x  \\\n",
       "140             145        b'Burundi'    3.775             0.046   \n",
       "\n",
       "     social_support_x  healthy_life_expectancy_x  \\\n",
       "140             0.447                       0.38   \n",
       "\n",
       "     freedom_to_make_life_choices_x  generosity_x  \\\n",
       "140                            0.22         0.176   \n",
       "\n",
       "     perceptions_of_corruption_x  overall_rank_y  score_y  gdp_per_capita_y  \\\n",
       "140                         0.18             156    2.905             0.091   \n",
       "\n",
       "     social_support_y  healthy_life_expectancy_y  \\\n",
       "140             0.627                      0.145   \n",
       "\n",
       "     freedom_to_make_life_choices_y  generosity_y  \\\n",
       "140                           0.065         0.149   \n",
       "\n",
       "     perceptions_of_corruption_y  diff_in_rank  \n",
       "140                        0.076            11  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_df.sort_values('overall_rank_y', ascending = False).head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, the contry with least happiness index in 2018 is Burundi with a rank of 156 and it improved to 145 in 2019, the country with least happiness index in 2019 is South Sudan which dropped from rank 154 to rank 156"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us save and upload our work to Jovian before continuing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "import jovian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[jovian] Attempting to save notebook..\u001b[0m\n",
      "[jovian] Updating notebook \"mgauthamvarma/world-happyness-index-analysis\" on https://jovian.ml/\u001b[0m\n",
      "[jovian] Uploading notebook..\u001b[0m\n",
      "[jovian] Capturing environment..\u001b[0m\n",
      "[jovian] Committed successfully! https://jovian.ml/mgauthamvarma/world-happyness-index-analysis\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'https://jovian.ml/mgauthamvarma/world-happyness-index-analysis'"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jovian.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inferences and Conclusion\n",
    "\n",
    "1. We observed that the gdp per capita of the country is in direct proportion to the happiness index score. Hence if the gdp is high happiness index score is most likely to be high\n",
    "\n",
    "2. Similarly, perceptions of corruption is in direct relation with happiness score that means corruption rate is in inverse proportion with with happiness score.\n",
    "\n",
    "3. We also observed how each factor is related to other factors and hence to the sores using bar-graphs. \n",
    "\n",
    "4. Using scatter plots we came to know that social suport and generosity are closely related.\n",
    "\n",
    "5. After analyzing the given data we cam to the conclusion that either moldova or bulgaria are the most corupted countries in 2019. \n",
    "\n",
    "6. We also conclude that 71 countries improved their happiness score of which Benin has highest  improvement of 34 ranks that is from 136 to 102, 66 countries downgraded them selves to lower scores of which Malaysia got downgraded by 45 ranks that is fom 35 to 80 and 15 countries remained same.\n",
    "\n",
    "7. Of the total set Finland topped the list in both the years and Burundi was least in 2018 with a rank of 156 and it improved to 145 in 2019, the country with least happiness index in 2019 is South Sudan which dropped from rank 154 to rank 156.\n",
    "\n",
    "8. The important point to note is that there are a total of 156 countries in bothe the 2018 and 2019 data sets but only 152 data sets in the combines data set, which indicates that there are four countries that didnot match in the two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "import jovian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[jovian] Attempting to save notebook..\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jovian.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References and Future Work\n",
    "\n",
    "In future we can combine this set with the world population set and analyse different situations and notice some useful observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import jovian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "jovian.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
